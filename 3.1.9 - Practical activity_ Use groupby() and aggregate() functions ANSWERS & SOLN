{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "efa7765a",
   "metadata": {},
   "source": [
    "# My Answers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4419977a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This is a continuation of the analysis you are doing alongside Mandisa Nkosi to inform decision-making in politics, \n",
    "#first introduced in 3.1.5 Practical activity: Create and merge the DataFrames. \n",
    "\n",
    "#In the previous activity, Mandisa imported and merged two data sets into a single DataFrame. This included films \n",
    "#released across many decades. The political party has a strong brand identity and they feel that positioning their \n",
    "#advertising along older films may reflect negatively on their contemporary policies.\n",
    "\n",
    "#Therefore, only films released after 2012 (Year>=2012 ) will be taken into consideration as Mandisa explores some \n",
    "#business questions.\n",
    "\n",
    "#How many films from each year (released from 2012 to the present) were watched on Netflix?\n",
    "#What is the average runtime of movies released each year?\n",
    "#What are the best and worst reviews movies received on Rotten Tomatoes?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba441980",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 1: How many films from each year (released from 2012 to the present) were watched on Netflix?\n",
    "\n",
    "#Determine how many films from each year (released from 2012 to the present) were watched on Netflix.\n",
    "\n",
    "#Name the new DataFrame that you will create, for example, mo_gpby.\n",
    "#Start with the groupby() function to split the mov_ott DataFrame into smaller parts.\n",
    "#Specify the Year and Netflix columns based on the question.\n",
    "#Apply the agg() function, specifically the sum as you have to calculate the total number of movies.\n",
    "#Specify to reset the index with the reset_index() function. (Hint: You are working with two columns that will create a \n",
    "#multi-index. The reset_index() will reset the index back to the default 0, 1, 2 etc. indexes.) \n",
    "#Without the reset_index(), the code snippet will return an error.\n",
    "\n",
    "#Specify that the DataFrame to be sorted based on the Year column (Year>=2012). (Hint: df[df['Year']>=2012])\n",
    "\n",
    "movies_ott_merge = pd.merge(movies_merge,ott_merge, how='left', on ='ID')\n",
    "print(movies_ott_merge)\n",
    "\n",
    "movies_ott_concat = pd.concat([movies_merge,ott_merge], axis=0)\n",
    "print(movies_ott_concat)\n",
    "movies_ott_concat\n",
    "\n",
    "movies_ott_concat = pd.concat([movies_merge,ott_merge], axis=0)\n",
    "\n",
    "mo_gbpy = movies_ott_concat.groupby(\"Year\")[[\"Netflix\"]] \\\n",
    ".agg(\"sum\").reset_index() \\\n",
    ".sort_values(movies_ott_concat[movies_ott_concat[\"Year\"]>=2012])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb184175",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 2: What is the average runtime of movies released each year?\n",
    "\n",
    "#Determine the average runtime of movies released each year.\n",
    "\n",
    "#Name the new DataFrame that you will create, for example, mo_gpby1. \n",
    "#Start with the groupby() function to split the mov_ott DataFrame into smaller parts.\n",
    "#Specify the Year and Runtime columns based on the question.\n",
    "#Apply the agg() function, specifically the mean as you have to calculate the average Runtime.\n",
    "#Specify to reset the index with the reset_index() function. \n",
    "#Specify that the DataFrame to be sorted based on the Year column (Year>=2012). (Hint: df[df['Year']>=2012])\n",
    "\n",
    "movies_ott_concat = pd.concat([movies_merge,ott_merge], axis=0)\n",
    "\n",
    "mo_gbpy1 = movies_ott_concat.groupby(\"Year\")[[\"Runtime\"]] \\\n",
    ".agg(\"mean\").reset_index() \\\n",
    ".sort_values(movies_ott_concat[movies_ott_concat[\"Year\"]>=2012])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91e5e42d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 3: What are the best and worst reviews movies received on Rotten Tomatoes?\n",
    "\n",
    "#Determine the maximum and minimum reviews received on Rotten Tomatoes for movies released each year since 2012.\n",
    "\n",
    "#Name the new DataFrame that you will create, for example, mo_gpby2. \n",
    "#Start with the groupby() function to split the mov_ott DataFrame into smaller parts.\n",
    "#Specify the Year and Rotten Tomatoes columns based on the question.\n",
    "#Apply the agg() function, specifically the min and max as you have to calculate the highest and lowest ranking value.\n",
    "#Specify to reset the index with the reset_index() function. \n",
    "#Specify that the DataFrame to be sorted based on the Year column (Year>=2012). (Hint: df[df['Year']>=2012])\n",
    "\n",
    "mo_gpby2 = movies_ott_concat.groupby(\"Year\")[[\"Rotten Tomatoes\"]] \\\n",
    ".agg(\"max\",\"min\").reset_index() \n",
    ".sort_values(movies_ott_concat[movies_ott_concat[\"Year\"]>=2012])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82eb094b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# take 2 - after quickly skimming the solution for q1\n",
    "\n",
    "#Question 1: How many films from each year (released from 2012 to the present) were watched on Netflix?\n",
    "\n",
    "mo_gbpy = movies_ott_merge.groupby(\"Year\")[[\"Netflix\"]].agg(\"sum\").reset_index() \n",
    "mo_gbpy[mo_gbpy[\"Year\"]>=2012]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4baae89a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 2: What is the average runtime of movies released each year?\n",
    "\n",
    "mo_gbpy1 = movies_ott_concat.groupby(\"Year\")[[\"Runtime\"]].agg(\"mean\").reset_index() \n",
    "mo_gbpy1[mo_gbpy1[\"Year\"]>=2012]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b437d5f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 3: What are the best and worst reviews movies received on Rotten Tomatoes?\n",
    "\n",
    "mo_gpby2 = movies_ott_merge.groupby(\"Year\")[[\"Rotten Tomatoes\"]].agg([\"max\",\"min\"]).reset_index() \n",
    "mo_gpby2[mo_gpby2[\"Year\"]>=2012]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d86bc076",
   "metadata": {},
   "outputs": [],
   "source": [
    "# main mistakes\n",
    "# filter at the end with the dataframe you vreated: mo_gpby2[mo_gpby2[\"Year\"]>=2012] NOT\n",
    "# the originalk dataframe you used to make it (movies_ott_merge)\n",
    "\n",
    "# use [] when writing multiple agg() functions: agg([\"max\",\"min\"])\n",
    "# use this syntax when writing the initial groupby code: groupby(['Year'])['Netflix']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f4a84f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# LSE's Solution - 3.1.9\n",
    "    \n",
    "#Prepare your workstation\n",
    "\n",
    "# Import Pandas.\n",
    "import pandas as pd\n",
    "\n",
    "# Load the Excel data using pd.read_excel.\n",
    "movies = pd.read_excel('movies_merge.xlsx')\n",
    "\n",
    "# Load the csv data using pd.read_csv.\n",
    "ott = pd.read_csv('ott_merge.csv')\n",
    "\n",
    "# Data imported correctly?\n",
    "print(movies.columns)\n",
    "print(movies.shape)\n",
    "print(ott.columns)\n",
    "print(ott.shape)\n",
    "\n",
    "# Merge the two DataFrames.\n",
    "mov_ott = pd.merge(movies, ott, how='left', on = 'ID')\n",
    "\n",
    "# DataFrames merged correctly?\n",
    "print(mov_ott.columns)\n",
    "print(mov_ott.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "644b2b50",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 1: How many films from each year (released from 2012 to the present) were watched on Netflix?\n",
    "\n",
    "# Determine the number of movies watched on Netflix since 2012.\n",
    "mo_gpby = mov_ott.groupby(['Year'])['Netflix'].agg('sum').reset_index()\n",
    "mo_gpby[mo_gpby['Year'] >= 2012]\n",
    "\n",
    "# My previous answer\n",
    "mo_gbpy = movies_ott_concat.groupby(\"Year\")[[\"Netflix\"]] \\\n",
    ".agg(\"sum\").reset_index() \\\n",
    ".sort_values(movies_ott_concat[movies_ott_concat[\"Year\"]>=2012])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9be99104",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 2: What is the average runtime of movies released each year?\n",
    "\n",
    "# Determine the average runtime of movies released since 2012.\n",
    "mo_gpby1 = mov_ott.groupby(['Year'])['Runtime'].agg('mean').reset_index()\n",
    "mo_gpby1[mo_gpby1['Year'] >= 2012]\n",
    "\n",
    "#My previous asnwer\n",
    "mo_gbpy1 = movies_ott_concat.groupby(\"Year\")[[\"Runtime\"]] \\\n",
    ".agg(\"mean\").reset_index() \\\n",
    ".sort_values(movies_ott_concat[movies_ott_concat[\"Year\"]>=2012])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2edaeec4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question 3: What are the best and worst reviews that movies released each year received on Rotten Tomatoes?\n",
    "\n",
    "# Determine what was the maximum and minimum review received by Rotten Tomatoes for any movie per year since 2012?\n",
    "mo_gpby2 = mov_ott.groupby(['Year'])['Rotten Tomatoes'].agg(['min','max']).reset_index()\n",
    "mo_gpby2[mo_gpby2['Year'] >= 2012]\n",
    "\n",
    "#My previous answer\n",
    "mo_gpby2 = movies_ott_concat.groupby(\"Year\")[[\"Rotten Tomatoes\"]] \\\n",
    ".agg(\"max\",\"min\").reset_index() \n",
    ".sort_values(movies_ott_concat[movies_ott_concat[\"Year\"]>=2012])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
